/* jshint node:true, newcap:false */
'use strict';

var mysql = require("mysql"),
		Bluebird = require("bluebird"),
		utils = require("./util.js");

var FreePBX = function FreePBX() {
	var obj = {};
	obj.connect = FreePBXConnect.bind(obj);
	return obj;
};

function LoadBaseConfig() {
	var runner = require('child_process');
	return new Bluebird(function (resolve, reject) {
		runner.exec(
			'php -r \'$bootstrap_settings["skip_astman"] = true; $restrict_mods = true; $bootstrap_settings["returnimmediately"] = true; include("/etc/freepbx.conf"); print json_encode($amp_conf);\'',
			function (err, stdout, stderr) {
				if(err) {
					console.error("Unable to connect to the PBX!"+err);
					throw "There was an error trying to connect to the PBX";
				} else if(stderr) {
					console.error("Unable to connect to the PBX!"+stderr);
					throw "There was an error trying to connect to the PBX";
				} else {
					//TODO need to check json parse response
					var config = JSON.parse(stdout);
					resolve(config);
				}
			}
		);
	});
}

function FreePBXConnect(config) {
	return new Bluebird(function (resolve, reject) {
		LoadBaseConfig()
		.then(DatabaseConnect)
		.then(LoadFreePBXConfig)
		.then(AMIConnect)
		.then(getFreePBXVersion)
		.then(function(freepbx) {
			var kvstore = require(__dirname+"/kvstore.js");
			freepbx.kvstore = new kvstore(freepbx.db,freepbx.version,freepbx.utils);
			resolve(freepbx);
		}).catch(function(err) {
			reject(err);
		})
	});
}

function DatabaseConnect(config) {
	return new Bluebird(function (resolve, reject) {
		var connection = {};
		if(typeof config.AMPDBSOCK !== "undefined" && config.AMPDBSOCK.length) {
			connection = mysql.createConnection({
				socketPath : config.AMPDBSOCK,
				user     : config.AMPDBUSER,
				password : config.AMPDBPASS,
				database : config.AMPDBNAME,
				charset: 'UTF8'
			});
		} else {
			let port = (typeof config.AMPDBPORT !== "undefined" && config.AMPDBPORT.length) ? config.AMPDBPORT : 3306
			connection = mysql.createConnection({
				host     : config.AMPDBHOST,
				port	 : port,
				user     : config.AMPDBUSER,
				password : config.AMPDBPASS,
				database : config.AMPDBNAME,
				charset: 'UTF8'
			});
		}
		resolve({config: config, db: connection});
		/*
		connection.connect(function(err) {
			if (err) {
				console.error("Unable to connect to MySQL!");
				throw "There was an error with the MySQL Connection";
			}
			resolve({config: config, db: connection});
		});
		*/
	});
}

function AMIConnect(config) {
	return new Bluebird(function (resolve, reject) {
		var astman = new require("asterisk-manager")(
			config.configs.ASTMANAGERPORT,
			config.configs.ASTMANAGERHOST,
			config.configs.AMPMGRUSER,
			config.configs.AMPMGRPASS,
		true);

		astman.keepConnected();

		astman.on("connect", function(evt) {
			resolve({config: config.configs, db: config.db, astman: astman});
		});

		astman.on("error", function(evt) {
			console.error("Unable to connect to asterisk!");
			throw "There was an error with Asterisk Manager Connection, is Asterisk running?";
		});

		astman.on("close", function(evt) {
			throw "There was an error with Asterisk Manager Connection is Asterisk running?";
		});
	});
}

function LoadFreePBXConfig(data) {
	return new Bluebird(function (resolve, reject){
		var config = require(__dirname+"/config.js");
		config = new config(data.db);
		config.load().then(function (configs) {
			resolve({config: data.config, db: data.db, configs: configs});
		}).catch(function(err) {
			reject(err);
		});
	});
}

function getFreePBXVersion(data) {
	return new Bluebird(function (resolve, reject){
		data.db.query("SELECT `value` FROM `admin` WHERE `variable` = 'version'", function (error, results, fields) {
			if(error) {
				reject(error);
				return;
			}
			resolve({config: data.config, db: data.db, version: results[0].value, utils: utils});
		});

	});
}

module.exports = FreePBX;
