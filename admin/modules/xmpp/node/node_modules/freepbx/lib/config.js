"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bluebird = require("bluebird");

var Config = function () {
	function Config(db) {
		_classCallCheck(this, Config);

		this.configs = {};
		this.db = db;
		this.init = false;
	}

	_createClass(Config, [{
		key: "load",
		value: function load() {
			var _this = this;

			return new Bluebird(function (resolve, reject) {
				var query = _this.db.query("SELECT * FROM freepbx_settings");
				var self = _this;
				query.on('result', function (row) {
					var val = row.value;
					if (row.type == "bool") {
						val = row.value !== 0 ? true : false;
					}
					self.configs[row.keyword] = val;
				}).on('end', function () {
					this.init = true;
					resolve(self.configs);
				});
			});
		}
	}, {
		key: "getAll",
		value: function getAll() {
			var _this2 = this;

			var cached = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

			if (!this.init || !cached) {
				return new Bluebird(function (resolve, reject) {
					return _this2.load().then(function (configs) {
						resolve(configs);
					});
				});
			} else {
				return Bluebird.resolve(this.configs);
			}
		}
	}, {
		key: "get",
		value: function get(keyword) {
			var _this3 = this;

			var cached = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

			if (!cached) {
				return new Bluebird(function (resolve, reject) {
					_this3.load().then(function (configs) {
						if (typeof _this3.configs[keyword] !== "undefined") {
							resolve(_this3.configs[keyword]);
						} else {
							reject();
						}
					});
				});
			} else {
				if (typeof this.configs[keyword] !== "undefined") {
					Bluebird.reject();
				} else {
					return Bluebird.resolve(this.configs[keyword]);
				}
			}
		}
	}]);

	return Config;
}();
module.exports = Config;
