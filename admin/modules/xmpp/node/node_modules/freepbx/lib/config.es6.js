var Bluebird = require("bluebird");

var Config = class Config {
	constructor(db) {
		this.configs = {};
		this.db = db;
		this.init = false;
	}

	load() {
		return new Bluebird((resolve, reject) => {
			var query = this.db.query("SELECT * FROM freepbx_settings");
			var self = this;
			query.on('result', function (row) {
					var val = row.value;
					if (row.type == "bool") {
						val = row.value !== 0 ? true : false;
					}
					self.configs[row.keyword] = val;
			}).on('end', function () {
				this.init = true;
				resolve(self.configs);
			});
		});
	}

	getAll(cached = true) {
		if (!this.init || !cached) {
			return new Bluebird((resolve, reject) => {
				return this.load().then((configs) => {
					resolve(configs);
				});
			});
		} else {
			return Bluebird.resolve(this.configs);
		}
	}

	get(keyword, cached = true) {
		if (!cached) {
			return new Bluebird((resolve, reject) => {
				this.load().then((configs) => {
					if(typeof this.configs[keyword] !== "undefined") {
						resolve(this.configs[keyword]);
					} else {
						reject();
					}
				});
			});
		} else {
			if(typeof this.configs[keyword] !== "undefined") {
				Bluebird.reject();
			} else {
				return Bluebird.resolve(this.configs[keyword]);
			}

		}
	}
};
module.exports = Config;
