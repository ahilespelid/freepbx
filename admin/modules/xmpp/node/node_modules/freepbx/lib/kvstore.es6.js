var Bluebird = require("bluebird"),
		Async = require("async");

var Kvstore = class Kvstore {
	constructor(db, version, utils) {
		this.db = db;
		this.version = utils.versionCompare(version,"14.0","<") ? "13" : "14";
	}

	getConfig(module, key = null, id = 'noid') {
		return new Bluebird((resolve, reject) => {
			if(this.version != '13') {
				var module14 = module.split('\\').join('_');
				this.db.query('SELECT * FROM ?? WHERE `key` = ? AND `id` = ?' , ['kvstore_' + module14, key, id], (error, results, fields) => {
					if(error) {
						resolve(false);
					}
					if(typeof results[0] === "undefined") {
						resolve(false);
					} else {
						resolve(this.parseResult(results[0]));
					}
				});
			} else {
				this.db.query('SELECT * FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?' , [module, key, id], (error, results, fields) => {
					if(error) {
						resolve(false);
					}
					if(typeof results[0] === "undefined") {
						resolve(false);
					} else {
						resolve(this.parseResult(results[0]));
					}
				});
			}
		});
	}

	getAllConfig(module) {
		return new Bluebird((resolve, reject) => {
			if(this.version != '13') {
				var module14 = module.split('\\').join('_');
				this.db.query('SELECT * FROM ??' , ['kvstore_' + module14], (error, results, fields) => {
					if(error) {
						resolve([]);
					}
					var settings = {};
					Async.each(results, (row, callback) => {
						settings[row.key] = this.parseResult(row);
						callback();
					}, function(err){
						if(err){
							reject(err);
						}
						resolve(settings);
					});

				});
			} else {
				this.db.query('SELECT * FROM `kvstore` WHERE `module` = ?' , [module], (error, results, fields) => {
					if(error) {
						resolve([]);
					}

					var settings = {};
					Async.each(results, (row, callback) => {
						settings[row.key] = this.parseResult(row);
						callback();
					}, function(err){
						if(err){
							reject(err);
						}
						resolve(settings);
					});
				});
			}
		});
	}

	setConfig(module, key = null, value = false, id = 'noid') {
		var type = null;
		if(typeof value === "object") {
			type = 'json-arr';
			value = JSON.stringify(value);
		} else if(typeof value === "boolean") {
			value = (value) ? 1 : 0;
		}
		return new Bluebird((resolve, reject) => {
			if(this.version != '13') {
				var module14 = module.split('\\').join('_');
				this.db.query('REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)', ['kvstore_' + module14,key,value,type,id], function (error, results, fields) {
					if (error) {
						reject(error);
						return;
					}
					resolve(results.affectedRows);
				});
			} else {
				this.db.query('REPLACE INTO `kvstore` (`module`,`key`,`val`,`type`,`id`) VALUES (?,?,?,?,?)', [module,key,value,type,id], function (error, results, fields) {
					if (error) {
						reject(error);
						return;
					}
					resolve(results.affectedRows);
				});
			}
		});
	}

	delConfig(module, key = null, id = 'noid') {
		return new Bluebird((resolve, reject) => {
			if(this.version != '13') {
				var module14 = module.split('\\').join('_');
				this.db.query('DELETE FROM ?? WHERE `key` = ? AND `id` = ?' , ['kvstore_' + module14,key, id], (error, results, fields) => {
					if(error) {
						reject(error);
					}
					resolve(true);
				});
			} else {
				this.db.query('DELETE FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?' , [module, key, id], (error, results, fields) => {
					if(error) {
						reject(error);
					}
					resolve(true);
				});
			}
		});
	}

	parseResult(result) {
		if(result.type == 'json-arr') {
			return JSON.parse(result.val);
		} else {
			return result.val.toString('utf8');
		}
	}
};
module.exports = Kvstore;
