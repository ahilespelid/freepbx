"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bluebird = require("bluebird"),
    Async = require("async");

var Kvstore = function () {
	function Kvstore(db, version, utils) {
		_classCallCheck(this, Kvstore);

		this.db = db;
		this.version = utils.versionCompare(version, "14.0", "<") ? "13" : "14";
	}

	_createClass(Kvstore, [{
		key: "getConfig",
		value: function getConfig(module) {
			var _this = this;

			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'noid';

			return new Bluebird(function (resolve, reject) {
				if (_this.version != '13') {
					var module14 = module.split('\\').join('_');
					_this.db.query('SELECT * FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module14, key, id], function (error, results, fields) {
						if (error) {
							resolve(false);
						}
						if (typeof results[0] === "undefined") {
							resolve(false);
						} else {
							resolve(_this.parseResult(results[0]));
						}
					});
				} else {
					_this.db.query('SELECT * FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?', [module, key, id], function (error, results, fields) {
						if (error) {
							resolve(false);
						}
						if (typeof results[0] === "undefined") {
							resolve(false);
						} else {
							resolve(_this.parseResult(results[0]));
						}
					});
				}
			});
		}
	}, {
		key: "getAllConfig",
		value: function getAllConfig(module) {
			var _this2 = this;

			return new Bluebird(function (resolve, reject) {
				if (_this2.version != '13') {
					var module14 = module.split('\\').join('_');
					_this2.db.query('SELECT * FROM ??', ['kvstore_' + module14], function (error, results, fields) {
						if (error) {
              console.log(error);
							resolve([]);
						}

						var settings = {};
						Async.each(results, function (row, callback) {
							settings[row.key] = _this2.parseResult(row);
							callback();
						}, function (err) {
							if (err) {
								reject(err);
							}
							resolve(settings);
						});
					});
				} else {
					_this2.db.query('SELECT * FROM `kvstore` WHERE `module` = ?', [module], function (error, results, fields) {
						if (error) {
							resolve([]);
						}

						var settings = {};
						Async.each(results, function (row, callback) {
							settings[row.key] = _this2.parseResult(row);
							callback();
						}, function (err) {
							if (err) {
								reject(err);
							}
							resolve(settings);
						});
					});
				}
			});
		}
	}, {
		key: "setConfig",
		value: function setConfig(module) {
			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			var _this3 = this;

			var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
			var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'noid';

			var type = null;
			if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
				type = 'json-arr';
				value = JSON.stringify(value);
			} else if (typeof value === "boolean") {
				value = value ? 1 : 0;
			}
			return new Bluebird(function (resolve, reject) {
				if (_this3.version != '13') {
					var module14 = module.split('\\').join('_');
					_this3.db.query('REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)', ['kvstore_' + module14, key, value, type, id], function (error, results, fields) {
						if (error) {
							reject(error);
							return;
						}
						resolve(results.affectedRows);
					});
				} else {
					_this3.db.query('REPLACE INTO `kvstore` (`module`,`key`,`val`,`type`,`id`) VALUES (?,?,?,?,?)', [module, key, value, type, id], function (error, results, fields) {
						if (error) {
							reject(error);
							return;
						}
						resolve(results.affectedRows);
					});
				}
			});
		}
	}, {
		key: "delConfig",
		value: function delConfig(module) {
			var _this4 = this;

			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'noid';

			return new Bluebird(function (resolve, reject) {
				if (_this4.version != '13') {
					var module14 = module.split('\\').join('_');
					_this4.db.query('DELETE FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module14, key, id], function (error, results, fields) {
						if (error) {
							reject(error);
						}
						resolve(true);
					});
				} else {
					_this4.db.query('DELETE FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?', [module, key, id], function (error, results, fields) {
						if (error) {
							reject(error);
						}
						resolve(true);
					});
				}
			});
		}
	}, {
		key: "parseResult",
		value: function parseResult(result) {
			if (result.type == 'json-arr') {
				return JSON.parse(result.val);
			} else {
				return result.val.toString('utf8');
			}
		}
	}]);

	return Kvstore;
}();
module.exports = Kvstore;
