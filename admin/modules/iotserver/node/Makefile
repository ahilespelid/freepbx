IMAGE_NAME := skeleton_app
REGISTRY := 922959455388.dkr.ecr.us-east-1.amazonaws.com
DOCKER_REPO_NAME := sangoma/$(IMAGE_NAME)
export REGISTRY
export DOCKER_REPO_NAME

GIT_BRANCH_NAME := $(shell git rev-parse --abbrev-ref HEAD | sed "sX/X-Xg")
GIT_TAG_NAME := $(shell git describe --always HEAD)

TAGS := $(GIT_BRANCH_NAME) $(GIT_TAG_NAME)

ifeq ($(GIT_BRANCH_NAME),master)
  TAGS += latest
endif

TAGS := $(foreach t,$(TAGS),$(REGISTRY)/$(DOCKER_REPO_NAME):$(t))

#
# default build target
#
all: build
.PHONY: all

#
# docker tag the build
#
tag: build
	echo $(TAGS) | xargs -n 1 docker tag $(REGISTRY)/$(DOCKER_REPO_NAME)
.PHONY: tag

#
# docker push the tags to the respoke registry
#
push: tag
	echo $(TAGS) | xargs -n 1 docker push
.PHONY: push

#
# docker pull latest dependencies.
#
pull:
	docker pull $(shell sed -n 's/^FROM // p' Dockerfile)
	-docker pull $(REGISTRY)/$(DOCKER_REPO_NAME):latest
	-docker pull $(REGISTRY)/$(DOCKER_REPO_NAME):$(GIT_BRANCH_NAME)
.PHONY: pull

cirrusid:
	$(error Please install the `cirrusid` certificate to the root of this project.)

#
# docker build the image
#
build: cirrusid
	docker build \
		--cache-from $(DOCKER_REPO_NAME) \
		--cache-from $(REGISTRY)/$(DOCKER_REPO_NAME):latest \
		--cache-from $(REGISTRY)/$(DOCKER_REPO_NAME):$(GIT_BRANCH_NAME) \
		-t $(REGISTRY)/$(DOCKER_REPO_NAME) \
		.
	docker-compose build
.PHONY: build

# start the service and database containers
#
start: build
	docker-compose up
.PHONY: start

#
# run unit tests
#
test: build
	docker-compose run --rm $(IMAGE_NAME) npm test
.PHONY: test

#
# run unit tests, with output for bamboo
#
bamboo-test: build
	rm -rf build
	mkdir -p build/test
	chmod -R 777 build
	docker-compose run --rm $(IMAGE_NAME) npm --silent run bamboo-test
.PHONY: bamboo-test

#
# git tag and git push
#
release:
	@OLD=$(shell node -pe "require('./package.json').version"); \
		echo "Changes since $${OLD}" && \
		git log --oneline --graph v$${OLD}..HEAD && \
		echo
	@read -r -p "Version? (major, minor, patch): " VERSION; \
		npm version $$VERSION
	git push origin HEAD $$(git describe HEAD)
.PHONY: release

#
# stop and remove any containers networks, images, or volumes created
# by this build
#
clean-containers:
	docker-compose down --volumes --remove-orphans
.PHONY: clean-containers

#
# quick cleanup; leaves things that are expensive to remove or rebuild
#
clean: clean-containers
	rm -rf build/
	rm -f version.txt
.PHONY: clean

#
# clean up even the stuff that's expensive to build
#
really-clean: clean clean-images
.PHONY: really-clean

#
# remove any images generated by this build
#
clean-images:
	docker images -f 'label=sangoma.name=$(IMAGE_NAME)' \
				  --format="{{.Repository}} {{.Tag}} {{.ID}}" | \
		awk '{ \
			if ($$2=="<none>") { \
				print $$3 \
			} else { \
				print $$1 ":" $$2 \
			} \
		}' | \
		xargs docker rmi
.PHONY: clean-images

#
# bamboo build process
#
bamboo: pull build bamboo-test tag push
	echo $(GIT_TAG_NAME)
	echo $(GIT_TAG_NAME) > version.txt
.PHONY: bamboo

#
# bamboo cleanup process. Stops and removes containers, but leaves images (for
# quicker rebuilds) and artifacts (version file, test results, etc.)
#
bamboo-clean: clean-containers
.PHONY: bamboo-clean

#
#  show the current version and branch name, for quick reference.
#
version:
	@echo Version: $(GIT_TAG_NAME)
	@echo Branch: $(GIT_BRANCH_NAME)
.PHONY: version

#
# Log into the shared digium docker registry
#
login:
	./registry-login.sh
.PHONY: login
